{"version":3,"sources":["components/Card.jsx","fetch/useFetchCards.js","utils/config.js","components/InfiniteScrollList.jsx","App.jsx","index.jsx"],"names":["Card","card","id","email","body","className","useFetchCards","page","useState","isLoading","setIsLoading","cards","setCards","hasMore","setHasMore","fetchCardsData","useCallback","a","url","fetch","res","json","data","ok","Error","prev","Set","length","console","error","message","useEffect","InfiniteScrollList","setPage","observerRef","useRef","map","ref","node","current","disconnect","IntersectionObserver","isIntersecting","observe","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAuBeA,EArBF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACNC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KAEnB,OACE,qBAAIC,UAAU,OAAd,UACE,sBAAKA,UAAU,cAAf,UACE,4CACA,4BAAIH,OAEN,sBAAKG,UAAU,cAAf,UACE,uCACA,4BAAIF,OAEN,gCACE,oBAAIE,UAAU,gBAAd,qBACA,4BAAID,W,8BCkBGE,EA/BO,SAACC,GACrB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAiBC,sBAAW,sBAAC,gCAAAC,EAAA,6DAC3BC,EAD2B,UCThB,iDDSgB,iBACDX,EADC,mBCNhB,IDQjBG,GAAa,GAFoB,kBAKbS,MAAMD,GALO,cAKzBE,EALyB,gBAMZA,EAAIC,OANQ,UAMzBC,EANyB,OAQ1BF,EAAIG,GARsB,uBAQZ,IAAIC,MCf3B,sEDOmC,QAU/BZ,GAAS,SAACa,GAAD,mBAAc,IAAIC,IAAJ,sBAAYD,GAAZ,YAAqBH,SAC5CR,EAAWQ,EAAKK,OAAS,GACzBjB,GAAa,GAZkB,kDAc/BA,GAAa,GACbkB,QAAQC,MAAM,KAAIC,SAfa,0DAiBhC,CAACvB,IAMJ,OAJAwB,qBAAU,WACRhB,MACC,CAACR,EAAMQ,IAEH,CAAEJ,QAAOE,UAASJ,cEMZuB,EAhCY,WACzB,MAAwBxB,mBDHE,GCG1B,mBAAOD,EAAP,KAAa0B,EAAb,KACA,EAAsC3B,EAAcC,GAA5CM,EAAR,EAAQA,QAASF,EAAjB,EAAiBA,MAAOF,EAAxB,EAAwBA,UAClByB,EAAcC,mBAepB,OACE,mCACE,sBAAK9B,UAAU,YAAf,UACE,6BACGM,EAAMyB,KAAI,SAACnC,GAAD,OACT,cAAC,EAAD,CAAMA,KAAMA,GAAWA,EAAKC,SAGhC,qBAAKG,UAAU,WAAWgC,IArBf,SAACC,GACZ7B,IACAyB,EAAYK,SAASL,EAAYK,QAAQC,aAE7CN,EAAYK,QAAU,IAAIE,sBAAqB,YAAa,oBAChDC,gBAAkB7B,GAC1BoB,GAAQ,SAAC1B,GAAD,OAAUA,EAAO,QAI7B+B,GAAQJ,EAAYK,QAAQI,QAAQL,aCRzBM,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCJNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3b848b26.chunk.js","sourcesContent":["import '../assets/css/Card.css';\n\nconst Card = ({ card }) => {\n  const { id, email, body } = card;\n\n  return (\n    <li className='card'>\n      <div className='card__title'>\n        <h2>Comment Id</h2>\n        <p>{id}</p>\n      </div>\n      <div className='card__title'>\n        <h2>Email</h2>\n        <p>{email}</p>\n      </div>\n      <div>\n        <h2 className='card--comment'>Comment</h2>\n        <p>{body}</p>\n      </div>\n    </li>\n  );\n};\n\nexport default Card;\n","// eslint-disable-next-line no-unused-vars\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { BASE_URL, LIMIT, ERROR_MESSAGE } from '../utils/config';\n\nconst useFetchCards = (page) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n\n  const fetchCardsData = useCallback(async () => {\n    const url = `${BASE_URL}_page=${page}&_limit=${LIMIT}`;\n    setIsLoading(true);\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n\n      if (!res.ok) throw new Error(ERROR_MESSAGE);\n\n      setCards((prev) => [...new Set([...prev, ...data])]);\n      setHasMore(data.length > 0);\n      setIsLoading(false);\n    } catch (err) {\n      setIsLoading(false);\n      console.error(err.message);\n    }\n  }, [page]);\n\n  useEffect(() => {\n    fetchCardsData();\n  }, [page, fetchCardsData]);\n\n  return { cards, hasMore, isLoading };\n};\n\nexport default useFetchCards;\n","export const BASE_URL = `https://jsonplaceholder.typicode.com/comments?`;\nexport const ERROR_MESSAGE =\n  'Failed to fetch data, please check your API or internet connection';\nexport const LIMIT = 10;\nexport const DEFAULT_PAGE = 1;\n","import '../assets/css/InfiniteScrollList.css';\nimport Card from './Card';\nimport { useState, useRef } from 'react';\nimport { DEFAULT_PAGE } from '../utils/config';\nimport useFetchCards from '../fetch/useFetchCards';\n\nconst InfiniteScrollList = () => {\n  const [page, setPage] = useState(DEFAULT_PAGE);\n  const { hasMore, cards, isLoading } = useFetchCards(page);\n  const observerRef = useRef();\n\n  const observer = (node) => {\n    if (isLoading) return;\n    if (observerRef.current) observerRef.current.disconnect();\n\n    observerRef.current = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting && hasMore) {\n        setPage((page) => page + 1);\n      }\n    });\n\n    node && observerRef.current.observe(node);\n  };\n\n  return (\n    <>\n      <div className='container'>\n        <ul>\n          {cards.map((card) => (\n            <Card card={card} key={card.id} />\n          ))}\n        </ul>\n        <div className='observer' ref={observer}></div>\n      </div>\n    </>\n  );\n};\n\nexport default InfiniteScrollList;\n","import \"./assets/css/App.css\";\nimport \"./assets/css/reset.css\";\nimport \"./components/InfiniteScrollList\";\nimport InfiniteScrollList from \"./components/InfiniteScrollList\";\n\nconst App = () => {\n  return (\n    <>\n      <InfiniteScrollList />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}